"""Untitled11.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/10o0BmTvgnvn58UdaUywvnWE5CCxrBxNF
"""
import base64
import json
import io
#import datetime

import dash
from dash import no_update
from dash import html
from dash import dcc
from dash.dependencies import Input, Output, State
from dash.exceptions import PreventUpdate
import dash_bootstrap_components as dbc
import dash_table
import dash_daq as daq
import pandas as pd
import numpy as np
import plotly.express as px
import dash_mantine_components as dmc

app = dash.Dash(__name__, external_stylesheets=[dbc.themes.LUMEN, dbc.icons.FONT_AWESOME])

def header():
    return dbc.Row([
        dbc.Col(dcc.Link(html.I(className="fa fa-home fa-2x", id="css-home-icon"), href='/'), width="auto"),
        dbc.Col(html.H3('MSD Transformer app', id="css-header-title"), width="auto"),
        dbc.Col(dcc.Link(html.I(className="fa fa-info fa-2x", id="css-info-icon"), href='/information'), width="auto")
    ], id="css-header")

def footer():
    github_url = "https://github.com/dabrze/topsis-msd-improvement-actions"
    return dash.html.Footer(children=[
        html.A(html.I(className="fab fa-github fa-2x", id="css-github-icon"), href=github_url, target="_blank"),
        html.Div(html.Img(src="assets/PP_znak_pe≈Çny_RGB.png", id="css-logo-img"), id="css-logo-div")
    ], id="css-footer")

def home():
    return html.Div(children=[
        html.Div([
            html.Button(dcc.Link('Load your dataset using WIZARD', href='/show_page_wizard_data_before_submit'), className='big-button'),
            html.Button(dcc.Link('Experiment with ready dataset', href='/main_dash'), className='big-button'),
        ], className='button-container')
    ])

#==============================================================
#   WIZARD
#==============================================================

def wizard():
    return html.Div(children=[
        dcc.Tabs(vertical=True, children=[
            dcc.Tab(label='data', children=[
                show_page_wizard_data_before_submit()
            ],
            id = 'wizard-data-output-data-table'),
            dcc.Tab(label='Parameters', children=[
                show_page_wizard_parameters()
            ]),
            dcc.Tab(label='Model', children=[
                show_page_wizard_model()
            ])
        ])
    ])


def show_page_wizard_data_before_submit():

    return html.Div([
        html.Div('Upload data'),
        dcc.Upload(
            id='wizard-data-input-upload-data',
            children=html.Div([
                'Drag and Drop or Select Files'
            ], id = 'wizard-data-output-upload-data-filename'),
            multiple=False
        ),

        html.Div('Upload parameters'),
        dcc.Store(id='wizard_state_stored-params', data=None),
        dcc.Upload(
            id='wizard-data-input-upload-params',
            children=html.Div([
                'Drag and Drop or Select Files'
            ], id = 'wizard-data-output-upload-params-filename'),
            multiple=False
        ),
        html.Div(id='wizard-data-output-parsed-data'),
        html.Div(id='wizard-data-output-parsed-params')        
    ])


def show_page_wizard_data_after_submit(data):
    return html.Div([
        html.Div('Data Loaded'),
        dash_table.DataTable(
            data=data,
            columns=[{'name': i, 'id': i} for i in list(data[0].keys())],
            page_size=8
        ),
        html.Button(dcc.Link('Next', href='/parameters'), className='next-button')
    ])


def show_page_wizard_parameters():
    return html.Div([
        html.Div(id='wizard-parameters-output-params-table'),
        html.Button(dcc.Link('Back', href='/data'), className='back-button'),
        html.Button(dcc.Link('Next', href='/model'), className='next-button')
    ])


def show_page_wizard_model():
    #https://dash-example-index.herokuapp.com/colourpicker-histogram
    return html.Div([

        html.Div([html.Div(
            style = {
                'height': '50px',
                'width' : '50px',
                'background-color': '#FF0000'
            }
        ),
        daq.ColorPicker(
            label="Color picker",
            size=164,
            value=dict(hex="#FF0000")
        ),
        dcc.RadioItems(['R', 'I','A'], 'R')], id="css-radio-items"),
        html.Button(dcc.Link('Back', href='/parameters'), className='back-button'),
        html.Button(dcc.Link('Finish', href='/main_dash'), className='finish-button')
    ])


@app.callback(Output('wizard-data-output-parsed-data', 'children'),
              Output('wizard-data-output-upload-data-filename', 'children'),
              Input('wizard-data-input-upload-data', 'contents'),
              State('wizard-data-input-upload-data', 'filename'),
              State('wizard-data-input-upload-data', 'last_modified'))
def update_wizard_data_output_data(contents_data, name_data, date_data):

    if contents_data is not None:
        child = [
            parse_file_wizard_data_data(c, n, d) for c, n, d in
            zip([contents_data], [name_data], [date_data])]
        return child, name_data   
    else:
        raise PreventUpdate


@app.callback(Output('wizard-data-output-parsed-params', 'children'),
              Output('wizard-data-output-upload-params-filename', 'children'),
              Input('wizard-data-input-upload-params', 'contents'),
              State('wizard-data-input-upload-params', 'filename'),
              State('wizard-data-input-upload-params', 'last_modified'))
def update_wizard_data_output_params(contents_params, name_params, date_params):
    
    if contents_params is not None:
        child = [
            parse_file_wizard_data_params(c, n, d) for c, n, d in
            zip([contents_params], [name_params], [date_params])]
        return child, name_params
    else:
        raise PreventUpdate
 

def parse_file_wizard_data_data(contents, filename, date):
    content_type, content_string = contents.split(',')

    decoded = base64.b64decode(content_string)
    try:
        if filename.endswith('.csv'):
            # Assume that the user uploaded a CSV file
            df = pd.read_csv(
                io.StringIO(decoded.decode('utf-8')), sep=';')
        elif filename.endswith('.xls'):
            # Assume that the user uploaded an excel file
            df = pd.read_excel(io.BytesIO(decoded))
        else:
            return "Please upload a file with the .csv or .xls extension"
    except Exception as e:
        print(e)
        return html.Div([
            'There was an error processing this file.'
        ])

    return html.Div([
        html.Hr(),

        dash_table.DataTable(
            data=df.to_dict('records'),
            columns=[{'name': i, 'id': i} for i in df.columns],
            page_size=8
        ),
        html.Button(id="wizard_data_input_submit-button", children="Submit"),
        dcc.Store(id='wizard_state_stored-data', data=df.to_dict('records')),

        html.Hr(),  # horizontal line

        # For debugging, display the raw contents provided by the web browser
        html.Div('Raw Content'),
        html.Pre(contents[0:200] + '...', style={
            'whiteSpace': 'pre-wrap',
            'wordBreak': 'break-all'
        })
    ])


def parse_file_wizard_data_params(contents, filename, date):
    content_type, content_string = contents.split(',')
    decoded = base64.b64decode(content_string)

    try:
        if filename.endswith('.json'):
            content_dict = json.loads(decoded)
        else:
            return "Please upload a file with the .json extension"
    except Exception as e:
        print(e)
        return html.Div([
            'There was an error processing this file.'
        ])
    
    return html.Div([
        dcc.Store(id='wizard_state_stored-params', data=content_dict),

        # For debugging, display the raw contents provided by the web browser
        html.Div('Raw Content'),
        html.Pre(contents[0:200] + '...', style={
            'whiteSpace': 'pre-wrap',
            'wordBreak': 'break-all'
        })
    ])


@app.callback(Output('wizard-parameters-output-params-table', 'children'),
              Output('wizard-data-output-data-table', 'children'),
              Input('wizard_data_input_submit-button','n_clicks'),
              State('wizard_state_stored-data','data'),
              State('wizard_state_stored-params','data'))
def submit_files_wizard_data(n, data, params):
    #https://dash.plotly.com/datatable/reference
    #https://dash.plotly.com/datatable/typing

    if n is None:
        return no_update
    
    params_labels = ['weight', 'expert-min', 'expert-max', 'objective']
    criteria = list(data[0].keys())
    columns = [{
                    'id': 'criterion', 
                    'name': 'Criterion',
                    'type': 'text',
                    'editable': False
                },{
                    'id': params_labels[0], 
                    'name': 'Weight',
                    'type': 'numeric'
                },{
                    'id': params_labels[1], 
                    'name': 'Expert Min',
                    'type': 'numeric'
                },{
                    'id': params_labels[2], 
                    'name': 'Expert Max',
                    'type': 'numeric'
                },{
                    'id': params_labels[3], 
                    'name': 'Objective',
                    'type': 'text'                    
                }]
    
    df = pd.DataFrame.from_dict(data).set_index(criteria[0])
    n_alternatives = df.shape[0]
    m_criteria = df.shape[1]

    weights = []
    expert_mins = []
    expert_maxs = []
    objectives = []

    data_params = []

    if params is None:
        weights = np.ones(m_criteria)
        expert_mins = df.min()
        expert_maxs = df.max()
        objectives = np.repeat('max', m_criteria)

        
        for id, c in enumerate(criteria[1:]):
            data_params.append(dict(criterion=c,
                        **{params_labels[0] : weights[id],
                         params_labels[1] : expert_mins[id],
                         params_labels[2] : expert_maxs[id],
                         params_labels[3] : objectives[id]}))
    
    else:
        weights = params["Weights"]
        expert_mins = params["Expert Min"]
        expert_maxs = params["Expert Max"]
        objectives = params["Objective"]

        data_params = []

        for id, c in enumerate(criteria[1:]):
            data_params.append(dict(criterion=c,
                        **{params_labels[0] : weights[id],
                         params_labels[1] : expert_mins[id],
                         params_labels[2] : expert_maxs[id],
                         params_labels[3] : objectives[id]}))

    return html.Div([
        #https://dash.plotly.com/datatable/editable
        dash_table.DataTable(
            columns = columns,
            data = data_params,
            editable = True
        )
    ]), show_page_wizard_data_after_submit(data)


#==============================================================
#   PLAYGROUND
#==============================================================

def main_dash():
    return html.Div(children=[
        dcc.Tabs(children=[
            dcc.Tab(label='Ranking vizualiazation', children=[
                ranking_vizualization()
            ]),
            dcc.Tab(label='Improvement actions', children=[
                improvement_actions()
            ]),
            dcc.Tab(label='analisis of parameters', children=[
                model_setter()
            ])
        ])
    ])

def model_setter():
    pass

def ranking_vizualization():
    #TO DO
    pass


def improvement_actions():
  #TO DO
  pass


#==============================================================
#   MAIN
#==============================================================

app.layout = html.Div(children=[
    header(),
    dcc.Location(id='url', refresh=False),
    html.Div(id='page-content'),
    footer()
], id="css-layout")

@app.callback(Output('page-content', 'children'),
              Input('url', 'pathname'))

def display_page(pathname):
    if pathname == '/':
        return home()
    elif pathname == '/wizard':
        return wizard()
    elif pathname == '/main_dash':
        return main_dash()
    else:
        return '404 - Page not found'

if __name__ == "__main__":
    app.run_server(debug=True)
